# -*- coding: utf-8 -*-
"""ML_CONCEPTS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1URR3LKKD-PpB1a2FlP7Zl_t6dQp__aD3
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import linear_model

df=pd.read_csv('/content/hr_data.csv')
df.head()

plt.scatter(x='area',y='price',data=df,color='red',marker='+')
plt.xlabel('area')
plt.ylabel('price')
plt.title('price vs area')

reg=linear_model.LinearRegression()
reg.fit(df[['area']],df.price)#training of model

reg.predict([[3300]])

reg.coef_

reg.intercept_

#price=mx+b m-coeff   b=intercept

m=135.78767123
b=180616.43835616432
m*2600+b

df

d=pd.read_csv('/content/ml.csv')
d

p=reg.predict(d)# for prediction

d['prices']=p#to save into the df

d

plt.plot(d['area'],d['prices'],color='red',marker='+')
plt.scatter(df['area'],df['price'],color='blue')
plt.xlabel('area')
plt.ylabel('prices')
plt.title('price vs area')

a=pd.read_csv('/content/canada_per_capita_income.csv')
a

reg.fit(a[['year']],a['per capita income (US$)'])

reg.predict([[2020]])

plt.scatter(a['year'],a['per capita income (US$)'],color='blue')
plt.plot(a['year'],reg.predict(a[['year']]),color='red')

#Mutlivariate regression

df2=pd.read_csv('/content/price.csv')
df2.head()

#For the NaN value , finding the median of bedrooms and providing it there
#is appropriate.

import math
median_bedrooms=math.floor(df2.bedrooms.median())
median_bedrooms

df2.bedrooms=df2.bedrooms.fillna(median_bedrooms)
df2

#Always preprocess your data(fix data before using)

reg=linear_model.LinearRegression()
reg.fit(df2[['area','bedrooms','age']],df2.price)

reg.coef_  #(m1,m2,m3)

reg.intercept_ #b

reg.predict([[3000,3,40]])

137.25*3000+(-26025*3)+(-6825*40)+383724.9999999998 #(Calculating how we got the above price)

reg.predict([[2500,4,5]])

df3=pd.read_csv('/content/experience.csv')
df3

median_test=math.floor(df3['test_score(interview_score)'].median())
median_test

df3['test_score(interview_score)']=df3['test_score(interview_score)'].fillna(median_test)
df3

reg1=linear_model.LinearRegression()
reg1.fit(df3[['experience','test_score(interview_score)','interview_score(out of 10)']],df3['salary($)'])

reg1.predict([[2,9,6]])

reg1.predict([[12,10,10]])